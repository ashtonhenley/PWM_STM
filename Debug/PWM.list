
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003200  08003200  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003200  08003200  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003200  08003200  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003204  08003204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003208  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000024  0800322c  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800322c  00005140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75a  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d04  00000000  00000000  000137a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000154b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2e  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014242  00000000  00000000  00016bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb9e  00000000  00000000  0002ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080013  00000000  00000000  0003a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba9b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed4  00000000  00000000  000ba9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000bd8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003114 	.word	0x08003114

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08003114 	.word	0x08003114

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	TIM1->CCR1 = 16383; // 0.25% of 65535, 25% duty cycle
 8000224:	4b19      	ldr	r3, [pc, #100]	@ (800028c <main+0x6c>)
 8000226:	4a1a      	ldr	r2, [pc, #104]	@ (8000290 <main+0x70>)
 8000228:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fc31 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f835 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f947 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000236:	f000 f879 	bl	800032c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023a:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <main+0x74>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fbb2 	bl	80019a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000244:	2000      	movs	r0, #0
 8000246:	f000 fa4b 	bl	80006e0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800024a:	2101      	movs	r1, #1
 800024c:	2000      	movs	r0, #0
 800024e:	f000 fab1 	bl	80007b4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <main+0x78>)
 8000254:	22e1      	movs	r2, #225	@ 0xe1
 8000256:	0252      	lsls	r2, r2, #9
 8000258:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800025a:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <main+0x78>)
 800025c:	2200      	movs	r2, #0
 800025e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000260:	4b0d      	ldr	r3, [pc, #52]	@ (8000298 <main+0x78>)
 8000262:	2200      	movs	r2, #0
 8000264:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <main+0x78>)
 8000268:	2200      	movs	r2, #0
 800026a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <main+0x78>)
 800026e:	2200      	movs	r2, #0
 8000270:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <main+0x78>)
 8000274:	0019      	movs	r1, r3
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fb42 	bl	8000900 <BSP_COM_Init>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d002      	beq.n	8000286 <main+0x66>
  {
    Error_Handler();
 8000280:	f000 f94e 	bl	8000520 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	e7fd      	b.n	8000286 <main+0x66>
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	40012c00 	.word	0x40012c00
 8000290:	00003fff 	.word	0x00003fff
 8000294:	20000050 	.word	0x20000050
 8000298:	20000040 	.word	0x20000040

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b08d      	sub	sp, #52	@ 0x34
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	231c      	movs	r3, #28
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f002 ff05 	bl	80030bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f002 fefe 	bl	80030bc <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002c0:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <SystemClock_Config+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2207      	movs	r2, #7
 80002c6:	4393      	bics	r3, r2
 80002c8:	001a      	movs	r2, r3
 80002ca:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <SystemClock_Config+0x8c>)
 80002cc:	2101      	movs	r1, #1
 80002ce:	430a      	orrs	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	0252      	lsls	r2, r2, #9
 80002de:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ff4e 	bl	8001184 <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 f918 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	003b      	movs	r3, r7
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2201      	movs	r2, #1
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030e:	003b      	movs	r3, r7
 8000310:	2101      	movs	r1, #1
 8000312:	0018      	movs	r0, r3
 8000314:	f001 f91a 	bl	800154c <HAL_RCC_ClockConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800031c:	f000 f900 	bl	8000520 <Error_Handler>
  }
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b00d      	add	sp, #52	@ 0x34
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	40022000 	.word	0x40022000

0800032c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	@ 0x70
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	2360      	movs	r3, #96	@ 0x60
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2310      	movs	r3, #16
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f002 febd 	bl	80030bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000342:	2354      	movs	r3, #84	@ 0x54
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	230c      	movs	r3, #12
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 feb5 	bl	80030bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000352:	2338      	movs	r3, #56	@ 0x38
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	231c      	movs	r3, #28
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f002 fead 	bl	80030bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	0018      	movs	r0, r3
 8000366:	2334      	movs	r3, #52	@ 0x34
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f002 fea6 	bl	80030bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000370:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000372:	4a52      	ldr	r2, [pc, #328]	@ (80004bc <MX_TIM1_Init+0x190>)
 8000374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000376:	4b50      	ldr	r3, [pc, #320]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000382:	4b4d      	ldr	r3, [pc, #308]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000384:	4a4e      	ldr	r2, [pc, #312]	@ (80004c0 <MX_TIM1_Init+0x194>)
 8000386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000388:	4b4b      	ldr	r3, [pc, #300]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800038e:	4b4a      	ldr	r3, [pc, #296]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000390:	2200      	movs	r2, #0
 8000392:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000394:	4b48      	ldr	r3, [pc, #288]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fa4b 	bl	8001838 <HAL_TIM_Base_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003a6:	f000 f8bb 	bl	8000520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003aa:	2160      	movs	r1, #96	@ 0x60
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	0152      	lsls	r2, r2, #5
 80003b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003b4:	187a      	adds	r2, r7, r1
 80003b6:	4b40      	ldr	r3, [pc, #256]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fccc 	bl	8001d58 <HAL_TIM_ConfigClockSource>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80003c4:	f000 f8ac 	bl	8000520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003c8:	4b3b      	ldr	r3, [pc, #236]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fa8c 	bl	80018e8 <HAL_TIM_PWM_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80003d4:	f000 f8a4 	bl	8000520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d8:	2154      	movs	r1, #84	@ 0x54
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 f954 	bl	80026a0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80003fc:	f000 f890 	bl	8000520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000400:	2138      	movs	r1, #56	@ 0x38
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2260      	movs	r2, #96	@ 0x60
 8000406:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042c:	1879      	adds	r1, r7, r1
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000430:	2200      	movs	r2, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fb90 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800043c:	f000 f870 	bl	8000520 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	0192      	lsls	r2, r2, #6
 8000464:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2280      	movs	r2, #128	@ 0x80
 800047c:	0492      	lsls	r2, r2, #18
 800047e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000492:	1d3a      	adds	r2, r7, #4
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f002 f963 	bl	8002764 <HAL_TIMEx_ConfigBreakDeadTime>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80004a2:	f000 f83d 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004a6:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <MX_TIM1_Init+0x18c>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 f883 	bl	80005b4 <HAL_TIM_MspPostInit>

}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b01c      	add	sp, #112	@ 0x70
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	20000050 	.word	0x20000050
 80004bc:	40012c00 	.word	0x40012c00
 80004c0:	0000ffff 	.word	0x0000ffff

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b14      	ldr	r3, [pc, #80]	@ (800051c <MX_GPIO_Init+0x58>)
 80004cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ce:	4b13      	ldr	r3, [pc, #76]	@ (800051c <MX_GPIO_Init+0x58>)
 80004d0:	2104      	movs	r1, #4
 80004d2:	430a      	orrs	r2, r1
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004d6:	4b11      	ldr	r3, [pc, #68]	@ (800051c <MX_GPIO_Init+0x58>)
 80004d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004da:	2204      	movs	r2, #4
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_GPIO_Init+0x58>)
 80004e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <MX_GPIO_Init+0x58>)
 80004e8:	2120      	movs	r1, #32
 80004ea:	430a      	orrs	r2, r1
 80004ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <MX_GPIO_Init+0x58>)
 80004f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004f2:	2220      	movs	r2, #32
 80004f4:	4013      	ands	r3, r2
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_GPIO_Init+0x58>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <MX_GPIO_Init+0x58>)
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
 8000506:	4b05      	ldr	r3, [pc, #20]	@ (800051c <MX_GPIO_Init+0x58>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050a:	2201      	movs	r2, #1
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b004      	add	sp, #16
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_MspInit+0x44>)
 8000534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <HAL_MspInit+0x44>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	641a      	str	r2, [r3, #64]	@ 0x40
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <HAL_MspInit+0x44>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <HAL_MspInit+0x44>)
 800054c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_MspInit+0x44>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0549      	lsls	r1, r1, #21
 8000554:	430a      	orrs	r2, r1
 8000556:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <HAL_MspInit+0x44>)
 800055a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	055b      	lsls	r3, r3, #21
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_TIM_Base_MspInit+0x38>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d10d      	bne.n	80005a2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_Base_MspInit+0x3c>)
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0109      	lsls	r1, r1, #4
 8000590:	430a      	orrs	r2, r1
 8000592:	641a      	str	r2, [r3, #64]	@ 0x40
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4013      	ands	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	40012c00 	.word	0x40012c00
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	240c      	movs	r4, #12
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f002 fd78 	bl	80030bc <memset>
  if(htim->Instance==TIM1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <HAL_TIM_MspPostInit+0x74>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d123      	bne.n	800061e <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	@ (800062c <HAL_TIM_MspPostInit+0x78>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_TIM_MspPostInit+0x78>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_TIM_MspPostInit+0x78>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	0052      	lsls	r2, r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2202      	movs	r2, #2
 80005fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2202      	movs	r2, #2
 800060e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	187a      	adds	r2, r7, r1
 8000612:	23a0      	movs	r3, #160	@ 0xa0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fc23 	bl	8000e64 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b009      	add	sp, #36	@ 0x24
 8000624:	bd90      	pop	{r4, r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40012c00 	.word	0x40012c00
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 fa7c 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f928 	bl	80008bc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <SystemInit+0x14>)
 800067a:	2280      	movs	r2, #128	@ 0x80
 800067c:	0512      	lsls	r2, r2, #20
 800067e:	609a      	str	r2, [r3, #8]
#endif
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000690:	f7ff fff0 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <LoopForever+0xa>)
  ldr r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80006b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b2:	3204      	adds	r2, #4

080006b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <LoopForever+0x16>)
  cmp r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006ba:	f002 fd07 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fdaf 	bl	8000220 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80006c8:	08003208 	.word	0x08003208
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d0:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80006d4:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80006d8:	20000140 	.word	0x20000140

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>
	...

080006e0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d007      	beq.n	8000708 <BSP_LED_Init+0x28>
      && (Led != LED2))
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d003      	beq.n	8000708 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000700:	2302      	movs	r3, #2
 8000702:	425b      	negs	r3, r3
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
 8000706:	e04a      	b.n	800079e <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10c      	bne.n	800072a <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <BSP_LED_Init+0xc8>)
 8000712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <BSP_LED_Init+0xc8>)
 8000716:	2101      	movs	r1, #1
 8000718:	430a      	orrs	r2, r1
 800071a:	635a      	str	r2, [r3, #52]	@ 0x34
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <BSP_LED_Init+0xc8>)
 800071e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000720:	2201      	movs	r2, #1
 8000722:	4013      	ands	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	e00b      	b.n	8000742 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <BSP_LED_Init+0xc8>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <BSP_LED_Init+0xc8>)
 8000730:	2104      	movs	r1, #4
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <BSP_LED_Init+0xc8>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073a:	2204      	movs	r2, #4
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <BSP_LED_Init+0xcc>)
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	5ad3      	ldrh	r3, [r2, r3]
 800074c:	001a      	movs	r2, r3
 800074e:	2110      	movs	r1, #16
 8000750:	187b      	adds	r3, r7, r1
 8000752:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2203      	movs	r2, #3
 8000764:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <BSP_LED_Init+0xd0>)
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	58d3      	ldr	r3, [r2, r3]
 8000770:	187a      	adds	r2, r7, r1
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fb75 	bl	8000e64 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10d      	bne.n	800079e <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <BSP_LED_Init+0xd0>)
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	58d0      	ldr	r0, [r2, r3]
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <BSP_LED_Init+0xcc>)
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	5ad3      	ldrh	r3, [r2, r3]
 8000796:	2201      	movs	r2, #1
 8000798:	0019      	movs	r1, r3
 800079a:	f000 fcd5 	bl	8001148 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 800079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b00a      	add	sp, #40	@ 0x28
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	0800318c 	.word	0x0800318c
 80007b0:	20000008 	.word	0x20000008

080007b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	1dbb      	adds	r3, r7, #6
 80007c2:	1c0a      	adds	r2, r1, #0
 80007c4:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <BSP_PB_Init+0xec>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ca:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <BSP_PB_Init+0xec>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <BSP_PB_Init+0xec>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d6:	2204      	movs	r2, #4
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	001a      	movs	r2, r3
 80007e4:	210c      	movs	r1, #12
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2201      	movs	r2, #1
 80007ee:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2202      	movs	r2, #2
 80007f4:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80007f6:	1dbb      	adds	r3, r7, #6
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <BSP_PB_Init+0xf0>)
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	58d3      	ldr	r3, [r2, r3]
 800080e:	187a      	adds	r2, r7, r1
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fb26 	bl	8000e64 <HAL_GPIO_Init>
 8000818:	e03c      	b.n	8000894 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800081a:	210c      	movs	r1, #12
 800081c:	187b      	adds	r3, r7, r1
 800081e:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <BSP_PB_Init+0xf4>)
 8000820:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <BSP_PB_Init+0xf0>)
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	58d3      	ldr	r3, [r2, r3]
 800082c:	187a      	adds	r2, r7, r1
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fb17 	bl	8000e64 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	0013      	movs	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	189b      	adds	r3, r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <BSP_PB_Init+0xf8>)
 8000844:	1898      	adds	r0, r3, r2
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <BSP_PB_Init+0xfc>)
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	58d3      	ldr	r3, [r2, r3]
 8000850:	0019      	movs	r1, r3
 8000852:	f000 faab 	bl	8000dac <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	0013      	movs	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	189b      	adds	r3, r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <BSP_PB_Init+0xf8>)
 8000864:	1898      	adds	r0, r3, r2
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <BSP_PB_Init+0x100>)
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	58d3      	ldr	r3, [r2, r3]
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f000 fa68 	bl	8000d48 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000878:	2007      	movs	r0, #7
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <BSP_PB_Init+0x104>)
 8000880:	0092      	lsls	r2, r2, #2
 8000882:	58d3      	ldr	r3, [r2, r3]
 8000884:	2200      	movs	r2, #0
 8000886:	0019      	movs	r1, r3
 8000888:	f000 fa2c 	bl	8000ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800088c:	2307      	movs	r3, #7
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fa3d 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b008      	add	sp, #32
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	20000010 	.word	0x20000010
 80008a8:	10210000 	.word	0x10210000
 80008ac:	2000009c 	.word	0x2000009c
 80008b0:	08003190 	.word	0x08003190
 80008b4:	20000014 	.word	0x20000014
 80008b8:	20000018 	.word	0x20000018

080008bc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	0013      	movs	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	189b      	adds	r3, r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <BSP_PB_IRQHandler+0x2c>)
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fa79 	bl	8000dd0 <HAL_EXTI_IRQHandler>
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	2000009c 	.word	0x2000009c

080008ec <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}

08000900 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800091a:	2302      	movs	r3, #2
 800091c:	425b      	negs	r3, r3
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e018      	b.n	8000954 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2294      	movs	r2, #148	@ 0x94
 8000928:	435a      	muls	r2, r3
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <BSP_COM_Init+0x60>)
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	0018      	movs	r0, r3
 8000930:	f000 f856 	bl	80009e0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2294      	movs	r2, #148	@ 0x94
 800093a:	435a      	muls	r2, r3
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <BSP_COM_Init+0x60>)
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 f80d 	bl	8000964 <MX_USART2_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d002      	beq.n	8000954 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800094e:	2304      	movs	r3, #4
 8000950:	425b      	negs	r3, r3
 8000952:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	200000a8 	.word	0x200000a8

08000964 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_USART2_Init+0x68>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	220c      	movs	r2, #12
 8000982:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	895b      	ldrh	r3, [r3, #10]
 8000988:	001a      	movs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	891b      	ldrh	r3, [r3, #8]
 800099a:	001a      	movs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	899b      	ldrh	r3, [r3, #12]
 80009a4:	001a      	movs	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	0212      	lsls	r2, r2, #8
 80009b0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 ff6e 	bl	800289c <HAL_UART_Init>
 80009c0:	0003      	movs	r3, r0
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	20000004 	.word	0x20000004

080009d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff ff89 	bl	80008ec <BSP_PB_Callback>
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b08b      	sub	sp, #44	@ 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <COM1_MspInit+0xac>)
 80009ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <COM1_MspInit+0xac>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	430a      	orrs	r2, r1
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <COM1_MspInit+0xac>)
 80009f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a10:	2201      	movs	r2, #1
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	0289      	lsls	r1, r1, #10
 8000a22:	430a      	orrs	r2, r1
 8000a24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <COM1_MspInit+0xac>)
 8000a28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	029b      	lsls	r3, r3, #10
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000a34:	2414      	movs	r4, #20
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2204      	movs	r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2202      	movs	r2, #2
 8000a40:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2202      	movs	r2, #2
 8000a46:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2201      	movs	r2, #1
 8000a52:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	@ 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fa01 	bl	8000e64 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2208      	movs	r2, #8
 8000a66:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	23a0      	movs	r3, #160	@ 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 f9f1 	bl	8000e64 <HAL_GPIO_Init>
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b00b      	add	sp, #44	@ 0x2c
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fd3d 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_InitTick+0x88>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d02b      	beq.n	8000b30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_InitTick+0x8c>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0x88>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	23fa      	movs	r3, #250	@ 0xfa
 8000ae4:	0098      	lsls	r0, r3, #2
 8000ae6:	f7ff fb0f 	bl	8000108 <__udivsi3>
 8000aea:	0003      	movs	r3, r0
 8000aec:	0019      	movs	r1, r3
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fb0a 	bl	8000108 <__udivsi3>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f919 	bl	8000d2e <HAL_SYSTICK_Config>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d112      	bne.n	8000b26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d80a      	bhi.n	8000b1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f8e8 	bl	8000ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_InitTick+0x90>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e00d      	b.n	8000b38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e008      	b.n	8000b38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b26:	230f      	movs	r3, #15
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e003      	b.n	8000b38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b005      	add	sp, #20
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	20000020 	.word	0x20000020
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	2000001c 	.word	0x2000001c

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	18d2      	adds	r2, r2, r3
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	20000020 	.word	0x20000020
 8000b74:	2000013c 	.word	0x2000013c

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	@ (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	2000013c 	.word	0x2000013c

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0002      	movs	r2, r0
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b9e:	d809      	bhi.n	8000bb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	231f      	movs	r3, #31
 8000ba8:	401a      	ands	r2, r3
 8000baa:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_EnableIRQ+0x30>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	4091      	lsls	r1, r2
 8000bb0:	000a      	movs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd4:	d828      	bhi.n	8000c28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c94 <__NVIC_SetPriority+0xd4>)
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	33c0      	adds	r3, #192	@ 0xc0
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	589b      	ldr	r3, [r3, r2]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	@ 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	@ 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <__NVIC_SetPriority+0xd4>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	33c0      	adds	r3, #192	@ 0xc0
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c26:	e031      	b.n	8000c8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0019      	movs	r1, r3
 8000c30:	230f      	movs	r3, #15
 8000c32:	400b      	ands	r3, r1
 8000c34:	3b08      	subs	r3, #8
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3306      	adds	r3, #6
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	3304      	adds	r3, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	0011      	movs	r1, r2
 8000c48:	2203      	movs	r2, #3
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	21ff      	movs	r1, #255	@ 0xff
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	22ff      	movs	r2, #255	@ 0xff
 8000c60:	401a      	ands	r2, r3
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	2303      	movs	r3, #3
 8000c6a:	4003      	ands	r3, r0
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	001c      	movs	r4, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	4023      	ands	r3, r4
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	430a      	orrs	r2, r1
 8000c82:	3306      	adds	r3, #6
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	18c3      	adds	r3, r0, r3
 8000c88:	3304      	adds	r3, #4
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b003      	add	sp, #12
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	2380      	movs	r3, #128	@ 0x80
 8000caa:	045b      	lsls	r3, r3, #17
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d301      	bcc.n	8000cb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e010      	b.n	8000cd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ff7c 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	0002      	movs	r2, r0
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff33 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ffaf 	bl	8000c9c <SysTick_Config>
 8000d3e:	0003      	movs	r3, r0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	200b      	movs	r0, #11
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	1c0a      	adds	r2, r1, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5a:	2317      	movs	r3, #23
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d010      	beq.n	8000d8c <HAL_EXTI_RegisterCallback+0x44>
 8000d6a:	dc13      	bgt.n	8000d94 <HAL_EXTI_RegisterCallback+0x4c>
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_EXTI_RegisterCallback+0x2e>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d007      	beq.n	8000d84 <HAL_EXTI_RegisterCallback+0x3c>
 8000d74:	e00e      	b.n	8000d94 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	609a      	str	r2, [r3, #8]
      break;
 8000d82:	e00c      	b.n	8000d9e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]
      break;
 8000d8a:	e008      	b.n	8000d9e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	609a      	str	r2, [r3, #8]
      break;
 8000d92:	e004      	b.n	8000d9e <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8000d94:	2317      	movs	r3, #23
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
      break;
 8000d9c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8000d9e:	2317      	movs	r3, #23
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	781b      	ldrb	r3, [r3, #0]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b006      	add	sp, #24
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e003      	b.n	8000dc8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
  }
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0c1b      	lsrs	r3, r3, #16
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	221f      	movs	r2, #31
 8000dea:	4013      	ands	r3, r2
 8000dec:	2201      	movs	r2, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_EXTI_IRQHandler+0x8c>)
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	4463      	add	r3, ip
 8000dfe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_EXTI_IRQHandler+0x90>)
 8000e2a:	4694      	mov	ip, r2
 8000e2c:	4463      	add	r3, ip
 8000e2e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d009      	beq.n	8000e54 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4798      	blx	r3
    }
  }
}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b006      	add	sp, #24
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	4002180c 	.word	0x4002180c
 8000e60:	40021810 	.word	0x40021810

08000e64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e72:	e153      	b.n	800111c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <HAL_GPIO_Init+0x28>
 8000e8a:	e144      	b.n	8001116 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x38>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b12      	cmp	r3, #18
 8000e9a:	d125      	bne.n	8000ee8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	58d3      	ldr	r3, [r2, r3]
 8000ea8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2207      	movs	r2, #7
 8000eae:	4013      	ands	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	43da      	mvns	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	2107      	movs	r1, #7
 8000ecc:	400b      	ands	r3, r1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	6979      	ldr	r1, [r7, #20]
 8000ee6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	401a      	ands	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d00b      	beq.n	8000f3c <HAL_GPIO_Init+0xd8>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d007      	beq.n	8000f3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f30:	2b11      	cmp	r3, #17
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b12      	cmp	r3, #18
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	055b      	lsls	r3, r3, #21
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x180>
 8000fe2:	e098      	b.n	8001116 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fe4:	4a53      	ldr	r2, [pc, #332]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3318      	adds	r3, #24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	589b      	ldr	r3, [r3, r2]
 8000ff0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	429a      	cmp	r2, r3
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x1e2>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <HAL_GPIO_Init+0x2d4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x1de>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a47      	ldr	r2, [pc, #284]	@ (800113c <HAL_GPIO_Init+0x2d8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x1da>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a46      	ldr	r2, [pc, #280]	@ (8001140 <HAL_GPIO_Init+0x2dc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x1d6>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a45      	ldr	r2, [pc, #276]	@ (8001144 <HAL_GPIO_Init+0x2e0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x1d2>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001036:	2306      	movs	r3, #6
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x1e4>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x1e4>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001046:	2300      	movs	r3, #0
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	2103      	movs	r1, #3
 800104c:	400a      	ands	r2, r1
 800104e:	00d2      	lsls	r2, r2, #3
 8001050:	4093      	lsls	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001058:	4936      	ldr	r1, [pc, #216]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3318      	adds	r3, #24
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	58d3      	ldr	r3, [r2, r3]
 800106c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43da      	mvns	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	4013      	ands	r3, r2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800108c:	4929      	ldr	r1, [pc, #164]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001094:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8001096:	2384      	movs	r3, #132	@ 0x84
 8001098:	58d3      	ldr	r3, [r2, r3]
 800109a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43da      	mvns	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4013      	ands	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	029b      	lsls	r3, r3, #10
 80010ae:	4013      	ands	r3, r2
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80010ba:	491e      	ldr	r1, [pc, #120]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010bc:	2284      	movs	r2, #132	@ 0x84
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43da      	mvns	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4013      	ands	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	2380      	movs	r3, #128	@ 0x80
 80010d8:	035b      	lsls	r3, r3, #13
 80010da:	4013      	ands	r3, r2
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43da      	mvns	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	039b      	lsls	r3, r3, #14
 8001104:	4013      	ands	r3, r2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_GPIO_Init+0x2d0>)
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	40da      	lsrs	r2, r3
 8001124:	1e13      	subs	r3, r2, #0
 8001126:	d000      	beq.n	800112a <HAL_GPIO_Init+0x2c6>
 8001128:	e6a4      	b.n	8000e74 <HAL_GPIO_Init+0x10>
  }
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b006      	add	sp, #24
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021800 	.word	0x40021800
 8001138:	50000400 	.word	0x50000400
 800113c:	50000800 	.word	0x50000800
 8001140:	50000c00 	.word	0x50000c00
 8001144:	50001400 	.word	0x50001400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	0008      	movs	r0, r1
 8001152:	0011      	movs	r1, r2
 8001154:	1cbb      	adds	r3, r7, #2
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1c7b      	adds	r3, r7, #1
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	1c7b      	adds	r3, r7, #1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001168:	1cbb      	adds	r3, r7, #2
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1d0      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x1e>
 80011a0:	e069      	b.n	8001276 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4bc8      	ldr	r3, [pc, #800]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2238      	movs	r2, #56	@ 0x38
 80011a8:	4013      	ands	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d105      	bne.n	80011be <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d15d      	bne.n	8001276 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1bc      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d107      	bne.n	80011da <HAL_RCC_OscConfig+0x56>
 80011ca:	4bbe      	ldr	r3, [pc, #760]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4bbd      	ldr	r3, [pc, #756]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	0249      	lsls	r1, r1, #9
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e020      	b.n	800121c <HAL_RCC_OscConfig+0x98>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23a0      	movs	r3, #160	@ 0xa0
 80011e0:	02db      	lsls	r3, r3, #11
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d10e      	bne.n	8001204 <HAL_RCC_OscConfig+0x80>
 80011e6:	4bb7      	ldr	r3, [pc, #732]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4bb6      	ldr	r3, [pc, #728]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	02c9      	lsls	r1, r1, #11
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	4bb3      	ldr	r3, [pc, #716]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4bb2      	ldr	r3, [pc, #712]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80011fa:	2180      	movs	r1, #128	@ 0x80
 80011fc:	0249      	lsls	r1, r1, #9
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0x98>
 8001204:	4baf      	ldr	r3, [pc, #700]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4bae      	ldr	r3, [pc, #696]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800120a:	49af      	ldr	r1, [pc, #700]	@ (80014c8 <HAL_RCC_OscConfig+0x344>)
 800120c:	400a      	ands	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4bac      	ldr	r3, [pc, #688]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4bab      	ldr	r3, [pc, #684]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001216:	49ad      	ldr	r1, [pc, #692]	@ (80014cc <HAL_RCC_OscConfig+0x348>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d014      	beq.n	800124e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fca8 	bl	8000b78 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800122e:	f7ff fca3 	bl	8000b78 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b64      	cmp	r3, #100	@ 0x64
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e17b      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001240:	4ba0      	ldr	r3, [pc, #640]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	4013      	ands	r3, r2
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0xaa>
 800124c:	e013      	b.n	8001276 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fc93 	bl	8000b78 <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001258:	f7ff fc8e 	bl	8000b78 <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e166      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126a:	4b96      	ldr	r3, [pc, #600]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0xfe>
 8001280:	e086      	b.n	8001390 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001282:	4b90      	ldr	r3, [pc, #576]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2238      	movs	r2, #56	@ 0x38
 8001288:	4013      	ands	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d12f      	bne.n	80012f2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e14c      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b89      	ldr	r3, [pc, #548]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a8b      	ldr	r2, [pc, #556]	@ (80014d0 <HAL_RCC_OscConfig+0x34c>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	021a      	lsls	r2, r3, #8
 80012ae:	4b85      	ldr	r3, [pc, #532]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d112      	bne.n	80012e0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ba:	4b82      	ldr	r3, [pc, #520]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a85      	ldr	r2, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x350>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	4b7e      	ldr	r3, [pc, #504]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012ce:	4b7d      	ldr	r3, [pc, #500]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0adb      	lsrs	r3, r3, #11
 80012d4:	2207      	movs	r2, #7
 80012d6:	4013      	ands	r3, r2
 80012d8:	4a7f      	ldr	r2, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x354>)
 80012da:	40da      	lsrs	r2, r3
 80012dc:	4b7f      	ldr	r3, [pc, #508]	@ (80014dc <HAL_RCC_OscConfig+0x358>)
 80012de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012e0:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x35c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff fbeb 	bl	8000ac0 <HAL_InitTick>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d050      	beq.n	8001390 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e122      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d030      	beq.n	800135c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012fa:	4b72      	ldr	r3, [pc, #456]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a75      	ldr	r2, [pc, #468]	@ (80014d4 <HAL_RCC_OscConfig+0x350>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	4b6e      	ldr	r3, [pc, #440]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800130e:	4b6d      	ldr	r3, [pc, #436]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001314:	2180      	movs	r1, #128	@ 0x80
 8001316:	0049      	lsls	r1, r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc2c 	bl	8000b78 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001326:	f7ff fc27 	bl	8000b78 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0ff      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001338:	4b62      	ldr	r3, [pc, #392]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4013      	ands	r3, r2
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a61      	ldr	r2, [pc, #388]	@ (80014d0 <HAL_RCC_OscConfig+0x34c>)
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	021a      	lsls	r2, r3, #8
 8001354:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001356:	430a      	orrs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	e019      	b.n	8001390 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800135c:	4b59      	ldr	r3, [pc, #356]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b58      	ldr	r3, [pc, #352]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001362:	4960      	ldr	r1, [pc, #384]	@ (80014e4 <HAL_RCC_OscConfig+0x360>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc06 	bl	8000b78 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc01 	bl	8000b78 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0d9      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	4b4f      	ldr	r3, [pc, #316]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2208      	movs	r2, #8
 8001396:	4013      	ands	r3, r2
 8001398:	d042      	beq.n	8001420 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800139a:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2238      	movs	r2, #56	@ 0x38
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	d105      	bne.n	80013b2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d138      	bne.n	8001420 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0c2      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013ba:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80013bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013be:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fbd7 	bl	8000b78 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbd2 	bl	8000b78 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0aa      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013e2:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d0f1      	beq.n	80013d0 <HAL_RCC_OscConfig+0x24c>
 80013ec:	e018      	b.n	8001420 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013ee:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80013f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	438a      	bics	r2, r1
 80013f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fbbd 	bl	8000b78 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001404:	f7ff fbb8 	bl	8000b78 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e090      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001416:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d1f1      	bne.n	8001404 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2204      	movs	r2, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x2a8>
 800142a:	e084      	b.n	8001536 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001434:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2238      	movs	r2, #56	@ 0x38
 800143a:	4013      	ands	r3, r2
 800143c:	2b20      	cmp	r3, #32
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d000      	beq.n	800144a <HAL_RCC_OscConfig+0x2c6>
 8001448:	e075      	b.n	8001536 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e074      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x2e0>
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001458:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001462:	e01c      	b.n	800149e <HAL_RCC_OscConfig+0x31a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x302>
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800146e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001472:	2104      	movs	r1, #4
 8001474:	430a      	orrs	r2, r1
 8001476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800147a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001484:	e00b      	b.n	800149e <HAL_RCC_OscConfig+0x31a>
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 800148c:	2101      	movs	r1, #1
 800148e:	438a      	bics	r2, r1
 8001490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_RCC_OscConfig+0x340>)
 8001498:	2104      	movs	r1, #4
 800149a:	438a      	bics	r2, r1
 800149c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d028      	beq.n	80014f8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb67 	bl	8000b78 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb62 	bl	8000b78 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_RCC_OscConfig+0x364>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d915      	bls.n	80014ec <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e039      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
 80014c4:	40021000 	.word	0x40021000
 80014c8:	fffeffff 	.word	0xfffeffff
 80014cc:	fffbffff 	.word	0xfffbffff
 80014d0:	ffff80ff 	.word	0xffff80ff
 80014d4:	ffffc7ff 	.word	0xffffc7ff
 80014d8:	02dc6c00 	.word	0x02dc6c00
 80014dc:	20000000 	.word	0x20000000
 80014e0:	2000001c 	.word	0x2000001c
 80014e4:	fffffeff 	.word	0xfffffeff
 80014e8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_RCC_OscConfig+0x3bc>)
 80014ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d0dc      	beq.n	80014b0 <HAL_RCC_OscConfig+0x32c>
 80014f6:	e013      	b.n	8001520 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb3e 	bl	8000b78 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001500:	e009      	b.n	8001516 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fb39 	bl	8000b78 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_RCC_OscConfig+0x3c0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e010      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_RCC_OscConfig+0x3bc>)
 8001518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151a:	2202      	movs	r2, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d105      	bne.n	8001536 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_RCC_OscConfig+0x3bc>)
 800152c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <HAL_RCC_OscConfig+0x3bc>)
 8001530:	4905      	ldr	r1, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x3c4>)
 8001532:	400a      	ands	r2, r1
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b006      	add	sp, #24
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	00001388 	.word	0x00001388
 8001548:	efffffff 	.word	0xefffffff

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0df      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b71      	ldr	r3, [pc, #452]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2207      	movs	r2, #7
 8001566:	4013      	ands	r3, r2
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d91e      	bls.n	80015ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2207      	movs	r2, #7
 8001574:	4393      	bics	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	4b6b      	ldr	r3, [pc, #428]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001580:	f7ff fafa 	bl	8000b78 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001588:	e009      	b.n	800159e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800158a:	f7ff faf5 	bl	8000b78 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	4a65      	ldr	r2, [pc, #404]	@ (800172c <HAL_RCC_ClockConfig+0x1e0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0c0      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800159e:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2207      	movs	r2, #7
 80015a4:	4013      	ands	r3, r2
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d017      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2204      	movs	r2, #4
 80015bc:	4013      	ands	r3, r2
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001734 <HAL_RCC_ClockConfig+0x1e8>)
 80015c6:	401a      	ands	r2, r3
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80015ca:	21b0      	movs	r1, #176	@ 0xb0
 80015cc:	0109      	lsls	r1, r1, #4
 80015ce:	430a      	orrs	r2, r1
 80015d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d2:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80015d8:	4013      	ands	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d04b      	beq.n	8001688 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	029b      	lsls	r3, r3, #10
 8001600:	4013      	ands	r3, r2
 8001602:	d11f      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e08b      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4013      	ands	r3, r2
 800161a:	d113      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e07f      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d106      	bne.n	8001636 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d108      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e074      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001636:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e06d      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001644:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2207      	movs	r2, #7
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001658:	f7ff fa8e 	bl	8000b78 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001660:	e009      	b.n	8001676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff fa89 	bl	8000b78 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <HAL_RCC_ClockConfig+0x1e0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e054      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	@ 0x38
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	429a      	cmp	r2, r3
 8001686:	d1ec      	bne.n	8001662 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2207      	movs	r2, #7
 800168e:	4013      	ands	r3, r2
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d21e      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2207      	movs	r2, #7
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016a8:	f7ff fa66 	bl	8000b78 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b0:	e009      	b.n	80016c6 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016b2:	f7ff fa61 	bl	8000b78 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <HAL_RCC_ClockConfig+0x1e0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e02c      	b.n	8001720 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_RCC_ClockConfig+0x1dc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2204      	movs	r2, #4
 80016da:	4013      	ands	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a16      	ldr	r2, [pc, #88]	@ (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016f2:	f000 f82b 	bl	800174c <HAL_RCC_GetSysClockFreq>
 80016f6:	0001      	movs	r1, r0
 80016f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_RCC_ClockConfig+0x1e4>)
 80016fa:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	220f      	movs	r2, #15
 8001700:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_RCC_ClockConfig+0x1f4>)
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001708:	221f      	movs	r2, #31
 800170a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800170c:	000a      	movs	r2, r1
 800170e:	40da      	lsrs	r2, r3
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_RCC_ClockConfig+0x1fc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff f9d1 	bl	8000ac0 <HAL_InitTick>
 800171e:	0003      	movs	r3, r0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000
 800172c:	00001388 	.word	0x00001388
 8001730:	40021000 	.word	0x40021000
 8001734:	ffff84ff 	.word	0xffff84ff
 8001738:	fffff0ff 	.word	0xfffff0ff
 800173c:	ffff8fff 	.word	0xffff8fff
 8001740:	0800312c 	.word	0x0800312c
 8001744:	20000000 	.word	0x20000000
 8001748:	2000001c 	.word	0x2000001c

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2238      	movs	r2, #56	@ 0x38
 8001758:	4013      	ands	r3, r2
 800175a:	d10f      	bne.n	800177c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x78>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0adb      	lsrs	r3, r3, #11
 8001762:	2207      	movs	r2, #7
 8001764:	4013      	ands	r3, r2
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	4815      	ldr	r0, [pc, #84]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001772:	f7fe fcc9 	bl	8000108 <__udivsi3>
 8001776:	0003      	movs	r3, r0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e01e      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x78>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2238      	movs	r2, #56	@ 0x38
 8001782:	4013      	ands	r3, r2
 8001784:	2b08      	cmp	r3, #8
 8001786:	d102      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x7c>)
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	e015      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2238      	movs	r2, #56	@ 0x38
 8001794:	4013      	ands	r3, r2
 8001796:	2b20      	cmp	r3, #32
 8001798:	d103      	bne.n	80017a2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x78>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2238      	movs	r2, #56	@ 0x38
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b18      	cmp	r3, #24
 80017ac:	d103      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017ae:	23fa      	movs	r3, #250	@ 0xfa
 80017b0:	01db      	lsls	r3, r3, #7
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	02dc6c00 	.word	0x02dc6c00

080017cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017d0:	f7ff ffbc 	bl	800174c <HAL_RCC_GetSysClockFreq>
 80017d4:	0001      	movs	r1, r0
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_GetHCLKFreq+0x30>)
 80017d8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	220f      	movs	r2, #15
 80017de:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_RCC_GetHCLKFreq+0x34>)
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017e6:	221f      	movs	r2, #31
 80017e8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017ea:	000a      	movs	r2, r1
 80017ec:	40da      	lsrs	r2, r3
 80017ee:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <HAL_RCC_GetHCLKFreq+0x38>)
 80017f0:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_RCC_GetHCLKFreq+0x38>)
 80017f4:	681b      	ldr	r3, [r3, #0]
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	0800312c 	.word	0x0800312c
 8001804:	20000000 	.word	0x20000000

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800180c:	f7ff ffde 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8001810:	0001      	movs	r1, r0
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0b1b      	lsrs	r3, r3, #12
 8001818:	2207      	movs	r2, #7
 800181a:	401a      	ands	r2, r3
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	58d3      	ldr	r3, [r2, r3]
 8001822:	221f      	movs	r2, #31
 8001824:	4013      	ands	r3, r2
 8001826:	40d9      	lsrs	r1, r3
 8001828:	000b      	movs	r3, r1
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	0800316c 	.word	0x0800316c

08001838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e04a      	b.n	80018e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	223d      	movs	r2, #61	@ 0x3d
 800184e:	5c9b      	ldrb	r3, [r3, r2]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	223c      	movs	r2, #60	@ 0x3c
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f7fe fe87 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223d      	movs	r2, #61	@ 0x3d
 800186a:	2102      	movs	r1, #2
 800186c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	0019      	movs	r1, r3
 8001878:	0010      	movs	r0, r2
 800187a:	f000 fb43 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2248      	movs	r2, #72	@ 0x48
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223e      	movs	r2, #62	@ 0x3e
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	223f      	movs	r2, #63	@ 0x3f
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2240      	movs	r2, #64	@ 0x40
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2241      	movs	r2, #65	@ 0x41
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2242      	movs	r2, #66	@ 0x42
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2243      	movs	r2, #67	@ 0x43
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2244      	movs	r2, #68	@ 0x44
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2245      	movs	r2, #69	@ 0x45
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2246      	movs	r2, #70	@ 0x46
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2247      	movs	r2, #71	@ 0x47
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	223d      	movs	r2, #61	@ 0x3d
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e04a      	b.n	8001990 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	223d      	movs	r2, #61	@ 0x3d
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d107      	bne.n	8001916 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	223c      	movs	r2, #60	@ 0x3c
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f841 	bl	8001998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223d      	movs	r2, #61	@ 0x3d
 800191a:	2102      	movs	r1, #2
 800191c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	0019      	movs	r1, r3
 8001928:	0010      	movs	r0, r2
 800192a:	f000 faeb 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2248      	movs	r2, #72	@ 0x48
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	223e      	movs	r2, #62	@ 0x3e
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2240      	movs	r2, #64	@ 0x40
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2241      	movs	r2, #65	@ 0x41
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2242      	movs	r2, #66	@ 0x42
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2243      	movs	r2, #67	@ 0x43
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2244      	movs	r2, #68	@ 0x44
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2245      	movs	r2, #69	@ 0x45
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2246      	movs	r2, #70	@ 0x46
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2247      	movs	r2, #71	@ 0x47
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	223d      	movs	r2, #61	@ 0x3d
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019a0:	46c0      	nop			@ (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d108      	bne.n	80019ca <HAL_TIM_PWM_Start+0x22>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	223e      	movs	r2, #62	@ 0x3e
 80019bc:	5c9b      	ldrb	r3, [r3, r2]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	4193      	sbcs	r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	e037      	b.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d108      	bne.n	80019e2 <HAL_TIM_PWM_Start+0x3a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	223f      	movs	r2, #63	@ 0x3f
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	1e5a      	subs	r2, r3, #1
 80019dc:	4193      	sbcs	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	e02b      	b.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d108      	bne.n	80019fa <HAL_TIM_PWM_Start+0x52>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	4193      	sbcs	r3, r2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	e01f      	b.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d108      	bne.n	8001a12 <HAL_TIM_PWM_Start+0x6a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2241      	movs	r2, #65	@ 0x41
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	4193      	sbcs	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	e013      	b.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d108      	bne.n	8001a2a <HAL_TIM_PWM_Start+0x82>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2242      	movs	r2, #66	@ 0x42
 8001a1c:	5c9b      	ldrb	r3, [r3, r2]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	4193      	sbcs	r3, r2
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	e007      	b.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2243      	movs	r2, #67	@ 0x43
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	4193      	sbcs	r3, r2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07b      	b.n	8001b3a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <HAL_TIM_PWM_Start+0xaa>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	223e      	movs	r2, #62	@ 0x3e
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	5499      	strb	r1, [r3, r2]
 8001a50:	e023      	b.n	8001a9a <HAL_TIM_PWM_Start+0xf2>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d104      	bne.n	8001a62 <HAL_TIM_PWM_Start+0xba>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	223f      	movs	r2, #63	@ 0x3f
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	5499      	strb	r1, [r3, r2]
 8001a60:	e01b      	b.n	8001a9a <HAL_TIM_PWM_Start+0xf2>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d104      	bne.n	8001a72 <HAL_TIM_PWM_Start+0xca>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	@ 0x40
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	5499      	strb	r1, [r3, r2]
 8001a70:	e013      	b.n	8001a9a <HAL_TIM_PWM_Start+0xf2>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d104      	bne.n	8001a82 <HAL_TIM_PWM_Start+0xda>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2241      	movs	r2, #65	@ 0x41
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	5499      	strb	r1, [r3, r2]
 8001a80:	e00b      	b.n	8001a9a <HAL_TIM_PWM_Start+0xf2>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d104      	bne.n	8001a92 <HAL_TIM_PWM_Start+0xea>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2242      	movs	r2, #66	@ 0x42
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	5499      	strb	r1, [r3, r2]
 8001a90:	e003      	b.n	8001a9a <HAL_TIM_PWM_Start+0xf2>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2243      	movs	r2, #67	@ 0x43
 8001a96:	2102      	movs	r1, #2
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fdd8 	bl	8002658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a25      	ldr	r2, [pc, #148]	@ (8001b44 <HAL_TIM_PWM_Start+0x19c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x11e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a24      	ldr	r2, [pc, #144]	@ (8001b48 <HAL_TIM_PWM_Start+0x1a0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x11e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	@ (8001b4c <HAL_TIM_PWM_Start+0x1a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_TIM_PWM_Start+0x124>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2180      	movs	r1, #128	@ 0x80
 8001adc:	0209      	lsls	r1, r1, #8
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_TIM_PWM_Start+0x19c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x14e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_TIM_PWM_Start+0x1a8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d116      	bne.n	8001b24 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <HAL_TIM_PWM_Start+0x1ac>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d016      	beq.n	8001b36 <HAL_TIM_PWM_Start+0x18e>
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d011      	beq.n	8001b36 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	e008      	b.n	8001b36 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40014400 	.word	0x40014400
 8001b4c:	40014800 	.word	0x40014800
 8001b50:	40000400 	.word	0x40000400
 8001b54:	00010007 	.word	0x00010007

08001b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2317      	movs	r3, #23
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	223c      	movs	r2, #60	@ 0x3c
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e0e5      	b.n	8001d46 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	223c      	movs	r2, #60	@ 0x3c
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b14      	cmp	r3, #20
 8001b86:	d900      	bls.n	8001b8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001b88:	e0d1      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	4b70      	ldr	r3, [pc, #448]	@ (8001d50 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 fa22 	bl	8001fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699a      	ldr	r2, [r3, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2108      	movs	r1, #8
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6999      	ldr	r1, [r3, #24]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	619a      	str	r2, [r3, #24]
      break;
 8001bd6:	e0af      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fa81 	bl	80020e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	0109      	lsls	r1, r1, #4
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4954      	ldr	r1, [pc, #336]	@ (8001d54 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6999      	ldr	r1, [r3, #24]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	021a      	lsls	r2, r3, #8
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	619a      	str	r2, [r3, #24]
      break;
 8001c1c:	e08c      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	0011      	movs	r1, r2
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fadc 	bl	80021e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2108      	movs	r1, #8
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2104      	movs	r1, #4
 8001c48:	438a      	bics	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69d9      	ldr	r1, [r3, #28]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	61da      	str	r2, [r3, #28]
      break;
 8001c5e:	e06b      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fb3d 	bl	80022e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0109      	lsls	r1, r1, #4
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4932      	ldr	r1, [pc, #200]	@ (8001d54 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69d9      	ldr	r1, [r3, #28]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	021a      	lsls	r2, r3, #8
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	61da      	str	r2, [r3, #28]
      break;
 8001ca4:	e048      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 fb7e 	bl	80023b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2104      	movs	r1, #4
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ce6:	e027      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	0011      	movs	r1, r2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fbb7 	bl	8002464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0109      	lsls	r1, r1, #4
 8001d04:	430a      	orrs	r2, r1
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4910      	ldr	r1, [pc, #64]	@ (8001d54 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	021a      	lsls	r2, r3, #8
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001d2c:	e004      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001d2e:	2317      	movs	r3, #23
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	223c      	movs	r2, #60	@ 0x3c
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

  return status;
 8001d40:	2317      	movs	r3, #23
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	781b      	ldrb	r3, [r3, #0]
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	08003194 	.word	0x08003194
 8001d54:	fffffbff 	.word	0xfffffbff

08001d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	223c      	movs	r2, #60	@ 0x3c
 8001d6e:	5c9b      	ldrb	r3, [r3, r2]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_TIM_ConfigClockSource+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0bc      	b.n	8001ef2 <HAL_TIM_ConfigClockSource+0x19a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	223c      	movs	r2, #60	@ 0x3c
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	223d      	movs	r2, #61	@ 0x3d
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4a5a      	ldr	r2, [pc, #360]	@ (8001efc <HAL_TIM_ConfigClockSource+0x1a4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4a59      	ldr	r2, [pc, #356]	@ (8001f00 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	0192      	lsls	r2, r2, #6
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d040      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0xde>
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	0192      	lsls	r2, r2, #6
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d900      	bls.n	8001dbe <HAL_TIM_ConfigClockSource+0x66>
 8001dbc:	e088      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001dbe:	2280      	movs	r2, #128	@ 0x80
 8001dc0:	0152      	lsls	r2, r2, #5
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d100      	bne.n	8001dc8 <HAL_TIM_ConfigClockSource+0x70>
 8001dc6:	e088      	b.n	8001eda <HAL_TIM_ConfigClockSource+0x182>
 8001dc8:	2280      	movs	r2, #128	@ 0x80
 8001dca:	0152      	lsls	r2, r2, #5
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d900      	bls.n	8001dd2 <HAL_TIM_ConfigClockSource+0x7a>
 8001dd0:	e07e      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001dd2:	2b70      	cmp	r3, #112	@ 0x70
 8001dd4:	d018      	beq.n	8001e08 <HAL_TIM_ConfigClockSource+0xb0>
 8001dd6:	d900      	bls.n	8001dda <HAL_TIM_ConfigClockSource+0x82>
 8001dd8:	e07a      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001dda:	2b60      	cmp	r3, #96	@ 0x60
 8001ddc:	d04f      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x126>
 8001dde:	d900      	bls.n	8001de2 <HAL_TIM_ConfigClockSource+0x8a>
 8001de0:	e076      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001de2:	2b50      	cmp	r3, #80	@ 0x50
 8001de4:	d03b      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x106>
 8001de6:	d900      	bls.n	8001dea <HAL_TIM_ConfigClockSource+0x92>
 8001de8:	e072      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d057      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x146>
 8001dee:	d900      	bls.n	8001df2 <HAL_TIM_ConfigClockSource+0x9a>
 8001df0:	e06e      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001df2:	2b30      	cmp	r3, #48	@ 0x30
 8001df4:	d063      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x166>
 8001df6:	d86b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d060      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x166>
 8001dfc:	d868      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d05d      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x166>
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d05b      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x166>
 8001e06:	e063      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e18:	f000 fbfe 	bl	8002618 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2277      	movs	r2, #119	@ 0x77
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
      break;
 8001e34:	e052      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e46:	f000 fbe7 	bl	8002618 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2180      	movs	r1, #128	@ 0x80
 8001e56:	01c9      	lsls	r1, r1, #7
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
      break;
 8001e5c:	e03e      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	f000 fb58 	bl	8002520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2150      	movs	r1, #80	@ 0x50
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 fbb2 	bl	80025e0 <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e02e      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	f000 fb76 	bl	800257c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2160      	movs	r1, #96	@ 0x60
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 fba2 	bl	80025e0 <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e01e      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eaa:	001a      	movs	r2, r3
 8001eac:	f000 fb38 	bl	8002520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fb92 	bl	80025e0 <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e00e      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	0010      	movs	r0, r2
 8001eca:	f000 fb89 	bl	80025e0 <TIM_ITRx_SetConfig>
      break;
 8001ece:	e005      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
      break;
 8001ed8:	e000      	b.n	8001edc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001eda:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223d      	movs	r2, #61	@ 0x3d
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	223c      	movs	r2, #60	@ 0x3c
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

  return status;
 8001eec:	230f      	movs	r3, #15
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	ffceff88 	.word	0xffceff88
 8001f00:	ffff00ff 	.word	0xffff00ff

08001f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd0 <TIM_Base_SetConfig+0xcc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x20>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <TIM_Base_SetConfig+0xd0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2270      	movs	r2, #112	@ 0x70
 8001f28:	4393      	bics	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <TIM_Base_SetConfig+0xcc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <TIM_Base_SetConfig+0x5a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <TIM_Base_SetConfig+0xd0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0x5a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <TIM_Base_SetConfig+0xd4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0x5a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <TIM_Base_SetConfig+0xd8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0x5a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <TIM_Base_SetConfig+0xdc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a20      	ldr	r2, [pc, #128]	@ (8001fe4 <TIM_Base_SetConfig+0xe0>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2280      	movs	r2, #128	@ 0x80
 8001f74:	4393      	bics	r3, r2
 8001f76:	001a      	movs	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <TIM_Base_SetConfig+0xcc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <TIM_Base_SetConfig+0xa4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <TIM_Base_SetConfig+0xd8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <TIM_Base_SetConfig+0xa4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <TIM_Base_SetConfig+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40002000 	.word	0x40002000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800
 8001fe4:	fffffcff 	.word	0xfffffcff

08001fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4393      	bics	r3, r2
 8002000:	001a      	movs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a2e      	ldr	r2, [pc, #184]	@ (80020d0 <TIM_OC1_SetConfig+0xe8>)
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2202      	movs	r2, #2
 8002030:	4393      	bics	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a24      	ldr	r2, [pc, #144]	@ (80020d4 <TIM_OC1_SetConfig+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_OC1_SetConfig+0x6e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <TIM_OC1_SetConfig+0xf0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_OC1_SetConfig+0x6e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <TIM_OC1_SetConfig+0xf4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10c      	bne.n	8002070 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2208      	movs	r2, #8
 800205a:	4393      	bics	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2204      	movs	r2, #4
 800206c:	4393      	bics	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a18      	ldr	r2, [pc, #96]	@ (80020d4 <TIM_OC1_SetConfig+0xec>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_OC1_SetConfig+0xa0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <TIM_OC1_SetConfig+0xf0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_OC1_SetConfig+0xa0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <TIM_OC1_SetConfig+0xf4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <TIM_OC1_SetConfig+0xf8>)
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <TIM_OC1_SetConfig+0xfc>)
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	621a      	str	r2, [r3, #32]
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b006      	add	sp, #24
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	fffeff8f 	.word	0xfffeff8f
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	fffffeff 	.word	0xfffffeff
 80020e4:	fffffdff 	.word	0xfffffdff

080020e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	2210      	movs	r2, #16
 80020fe:	4393      	bics	r3, r2
 8002100:	001a      	movs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a2c      	ldr	r2, [pc, #176]	@ (80021c8 <TIM_OC2_SetConfig+0xe0>)
 8002116:	4013      	ands	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a2b      	ldr	r2, [pc, #172]	@ (80021cc <TIM_OC2_SetConfig+0xe4>)
 800211e:	4013      	ands	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2220      	movs	r2, #32
 8002132:	4393      	bics	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a22      	ldr	r2, [pc, #136]	@ (80021d0 <TIM_OC2_SetConfig+0xe8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	4393      	bics	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2240      	movs	r2, #64	@ 0x40
 8002162:	4393      	bics	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <TIM_OC2_SetConfig+0xe8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_OC2_SetConfig+0x96>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <TIM_OC2_SetConfig+0xec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_OC2_SetConfig+0x96>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <TIM_OC2_SetConfig+0xf0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d113      	bne.n	80021a6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <TIM_OC2_SetConfig+0xf4>)
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <TIM_OC2_SetConfig+0xf8>)
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	621a      	str	r2, [r3, #32]
}
 80021c0:	46c0      	nop			@ (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b006      	add	sp, #24
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	feff8fff 	.word	0xfeff8fff
 80021cc:	fffffcff 	.word	0xfffffcff
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40014800 	.word	0x40014800
 80021dc:	fffffbff 	.word	0xfffffbff
 80021e0:	fffff7ff 	.word	0xfffff7ff

080021e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <TIM_OC3_SetConfig+0xdc>)
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <TIM_OC3_SetConfig+0xe0>)
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2203      	movs	r2, #3
 8002218:	4393      	bics	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <TIM_OC3_SetConfig+0xe4>)
 800222a:	4013      	ands	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <TIM_OC3_SetConfig+0xe8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a22      	ldr	r2, [pc, #136]	@ (80022d0 <TIM_OC3_SetConfig+0xec>)
 8002246:	4013      	ands	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <TIM_OC3_SetConfig+0xf0>)
 800225a:	4013      	ands	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <TIM_OC3_SetConfig+0xe8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_OC3_SetConfig+0x92>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <TIM_OC3_SetConfig+0xf4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_OC3_SetConfig+0x92>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1a      	ldr	r2, [pc, #104]	@ (80022dc <TIM_OC3_SetConfig+0xf8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d113      	bne.n	800229e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a19      	ldr	r2, [pc, #100]	@ (80022e0 <TIM_OC3_SetConfig+0xfc>)
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4a18      	ldr	r2, [pc, #96]	@ (80022e4 <TIM_OC3_SetConfig+0x100>)
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	621a      	str	r2, [r3, #32]
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b006      	add	sp, #24
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	fffffeff 	.word	0xfffffeff
 80022c4:	fffeff8f 	.word	0xfffeff8f
 80022c8:	fffffdff 	.word	0xfffffdff
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	fffff7ff 	.word	0xfffff7ff
 80022d4:	fffffbff 	.word	0xfffffbff
 80022d8:	40014400 	.word	0x40014400
 80022dc:	40014800 	.word	0x40014800
 80022e0:	ffffefff 	.word	0xffffefff
 80022e4:	ffffdfff 	.word	0xffffdfff

080022e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <TIM_OC4_SetConfig+0xa8>)
 80022fe:	401a      	ands	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a20      	ldr	r2, [pc, #128]	@ (8002394 <TIM_OC4_SetConfig+0xac>)
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a1f      	ldr	r2, [pc, #124]	@ (8002398 <TIM_OC4_SetConfig+0xb0>)
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <TIM_OC4_SetConfig+0xb4>)
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	031b      	lsls	r3, r3, #12
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <TIM_OC4_SetConfig+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_OC4_SetConfig+0x70>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a16      	ldr	r2, [pc, #88]	@ (80023a4 <TIM_OC4_SetConfig+0xbc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_OC4_SetConfig+0x70>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <TIM_OC4_SetConfig+0xc0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <TIM_OC4_SetConfig+0xc4>)
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b006      	add	sp, #24
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	ffffefff 	.word	0xffffefff
 8002394:	feff8fff 	.word	0xfeff8fff
 8002398:	fffffcff 	.word	0xfffffcff
 800239c:	ffffdfff 	.word	0xffffdfff
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800
 80023ac:	ffffbfff 	.word	0xffffbfff

080023b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a21      	ldr	r2, [pc, #132]	@ (800244c <TIM_OC5_SetConfig+0x9c>)
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <TIM_OC5_SetConfig+0xa0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <TIM_OC5_SetConfig+0xa4>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <TIM_OC5_SetConfig+0xa8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_OC5_SetConfig+0x66>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a14      	ldr	r2, [pc, #80]	@ (800245c <TIM_OC5_SetConfig+0xac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_OC5_SetConfig+0x66>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a13      	ldr	r2, [pc, #76]	@ (8002460 <TIM_OC5_SetConfig+0xb0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d109      	bne.n	800242a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <TIM_OC5_SetConfig+0x9c>)
 800241a:	4013      	ands	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffeffff 	.word	0xfffeffff
 8002450:	fffeff8f 	.word	0xfffeff8f
 8002454:	fffdffff 	.word	0xfffdffff
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800

08002464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <TIM_OC6_SetConfig+0xa0>)
 800247a:	401a      	ands	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a1e      	ldr	r2, [pc, #120]	@ (8002508 <TIM_OC6_SetConfig+0xa4>)
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <TIM_OC6_SetConfig+0xa8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	051b      	lsls	r3, r3, #20
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <TIM_OC6_SetConfig+0xac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <TIM_OC6_SetConfig+0x68>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <TIM_OC6_SetConfig+0xb0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d003      	beq.n	80024cc <TIM_OC6_SetConfig+0x68>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <TIM_OC6_SetConfig+0xb4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d109      	bne.n	80024e0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4a13      	ldr	r2, [pc, #76]	@ (800251c <TIM_OC6_SetConfig+0xb8>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	621a      	str	r2, [r3, #32]
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b006      	add	sp, #24
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	ffefffff 	.word	0xffefffff
 8002508:	feff8fff 	.word	0xfeff8fff
 800250c:	ffdfffff 	.word	0xffdfffff
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40014400 	.word	0x40014400
 8002518:	40014800 	.word	0x40014800
 800251c:	fffbffff 	.word	0xfffbffff

08002520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2201      	movs	r2, #1
 8002538:	4393      	bics	r3, r2
 800253a:	001a      	movs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	22f0      	movs	r2, #240	@ 0xf0
 800254a:	4393      	bics	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	220a      	movs	r2, #10
 800255c:	4393      	bics	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	621a      	str	r2, [r3, #32]
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b006      	add	sp, #24
 800257a:	bd80      	pop	{r7, pc}

0800257c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	2210      	movs	r2, #16
 8002594:	4393      	bics	r3, r2
 8002596:	001a      	movs	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <TIM_TI2_ConfigInputStage+0x60>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	031b      	lsls	r3, r3, #12
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	22a0      	movs	r2, #160	@ 0xa0
 80025b8:	4393      	bics	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	ffff0fff 	.word	0xffff0fff

080025e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a08      	ldr	r2, [pc, #32]	@ (8002614 <TIM_ITRx_SetConfig+0x34>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	2207      	movs	r2, #7
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	ffcfff8f 	.word	0xffcfff8f

08002618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4a09      	ldr	r2, [pc, #36]	@ (8002654 <TIM_ETR_SetConfig+0x3c>)
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	431a      	orrs	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b006      	add	sp, #24
 8002652:	bd80      	pop	{r7, pc}
 8002654:	ffff00ff 	.word	0xffff00ff

08002658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	221f      	movs	r2, #31
 8002668:	4013      	ands	r3, r2
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	43d2      	mvns	r2, r2
 800267a:	401a      	ands	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	211f      	movs	r1, #31
 8002688:	400b      	ands	r3, r1
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4099      	lsls	r1, r3
 800268e:	000b      	movs	r3, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b006      	add	sp, #24
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	223c      	movs	r2, #60	@ 0x3c
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e04a      	b.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	223c      	movs	r2, #60	@ 0x3c
 80026bc:	2101      	movs	r1, #1
 80026be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	223d      	movs	r2, #61	@ 0x3d
 80026c4:	2102      	movs	r1, #2
 80026c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2270      	movs	r2, #112	@ 0x70
 80026f8:	4393      	bics	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10c      	bne.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	4393      	bics	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4313      	orrs	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223d      	movs	r2, #61	@ 0x3d
 8002740:	2101      	movs	r1, #1
 8002742:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223c      	movs	r2, #60	@ 0x3c
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	40012c00 	.word	0x40012c00
 800275c:	ff0fffff 	.word	0xff0fffff
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223c      	movs	r2, #60	@ 0x3c
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e06f      	b.n	8002860 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	223c      	movs	r2, #60	@ 0x3c
 8002784:	2101      	movs	r1, #1
 8002786:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	22ff      	movs	r2, #255	@ 0xff
 800278c:	4393      	bics	r3, r2
 800278e:	001a      	movs	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a33      	ldr	r2, [pc, #204]	@ (8002868 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800279c:	401a      	ands	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a30      	ldr	r2, [pc, #192]	@ (800286c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80027aa:	401a      	ands	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002870 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80027b8:	401a      	ands	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002874 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80027c6:	401a      	ands	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a29      	ldr	r2, [pc, #164]	@ (8002878 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80027d4:	401a      	ands	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a26      	ldr	r2, [pc, #152]	@ (800287c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80027e2:	401a      	ands	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a24      	ldr	r2, [pc, #144]	@ (8002880 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80027f0:	401a      	ands	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a21      	ldr	r2, [pc, #132]	@ (8002884 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002800:	401a      	ands	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d11c      	bne.n	800284e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a1d      	ldr	r2, [pc, #116]	@ (800288c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002818:	401a      	ands	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	051b      	lsls	r3, r3, #20
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002828:	401a      	ands	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002836:	401a      	ands	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a15      	ldr	r2, [pc, #84]	@ (8002898 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002844:	401a      	ands	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223c      	movs	r2, #60	@ 0x3c
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	fffffcff 	.word	0xfffffcff
 800286c:	fffffbff 	.word	0xfffffbff
 8002870:	fffff7ff 	.word	0xfffff7ff
 8002874:	ffffefff 	.word	0xffffefff
 8002878:	ffffdfff 	.word	0xffffdfff
 800287c:	ffffbfff 	.word	0xffffbfff
 8002880:	fff0ffff 	.word	0xfff0ffff
 8002884:	efffffff 	.word	0xefffffff
 8002888:	40012c00 	.word	0x40012c00
 800288c:	ff0fffff 	.word	0xff0fffff
 8002890:	feffffff 	.word	0xfeffffff
 8002894:	fdffffff 	.word	0xfdffffff
 8002898:	dfffffff 	.word	0xdfffffff

0800289c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e046      	b.n	800293c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2288      	movs	r2, #136	@ 0x88
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2284      	movs	r2, #132	@ 0x84
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f840 	bl	8002948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2288      	movs	r2, #136	@ 0x88
 80028cc:	2124      	movs	r1, #36	@ 0x24
 80028ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2101      	movs	r1, #1
 80028dc:	438a      	bics	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f9b2 	bl	8002c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 f830 	bl	8002958 <UART_SetConfig>
 80028f8:	0003      	movs	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e01c      	b.n	800293c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	490d      	ldr	r1, [pc, #52]	@ (8002944 <HAL_UART_Init+0xa8>)
 800290e:	400a      	ands	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	212a      	movs	r1, #42	@ 0x2a
 800291e:	438a      	bics	r2, r1
 8002920:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fa41 	bl	8002dbc <UART_CheckIdleState>
 800293a:	0003      	movs	r3, r0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}
 8002944:	ffffb7ff 	.word	0xffffb7ff

08002948 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002960:	231e      	movs	r3, #30
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4aab      	ldr	r2, [pc, #684]	@ (8002c34 <UART_SetConfig+0x2dc>)
 8002988:	4013      	ands	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4aa6      	ldr	r2, [pc, #664]	@ (8002c38 <UART_SetConfig+0x2e0>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a9d      	ldr	r2, [pc, #628]	@ (8002c3c <UART_SetConfig+0x2e4>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	220f      	movs	r2, #15
 80029dc:	4393      	bics	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a93      	ldr	r2, [pc, #588]	@ (8002c40 <UART_SetConfig+0x2e8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d127      	bne.n	8002a46 <UART_SetConfig+0xee>
 80029f6:	4b93      	ldr	r3, [pc, #588]	@ (8002c44 <UART_SetConfig+0x2ec>)
 80029f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fa:	2203      	movs	r2, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d017      	beq.n	8002a32 <UART_SetConfig+0xda>
 8002a02:	d81b      	bhi.n	8002a3c <UART_SetConfig+0xe4>
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d00a      	beq.n	8002a1e <UART_SetConfig+0xc6>
 8002a08:	d818      	bhi.n	8002a3c <UART_SetConfig+0xe4>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <UART_SetConfig+0xbc>
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00a      	beq.n	8002a28 <UART_SetConfig+0xd0>
 8002a12:	e013      	b.n	8002a3c <UART_SetConfig+0xe4>
 8002a14:	231f      	movs	r3, #31
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e021      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a1e:	231f      	movs	r3, #31
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2202      	movs	r2, #2
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e01c      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a28:	231f      	movs	r3, #31
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e017      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a32:	231f      	movs	r3, #31
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2208      	movs	r2, #8
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e012      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a3c:	231f      	movs	r3, #31
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2210      	movs	r2, #16
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e00d      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7f      	ldr	r2, [pc, #508]	@ (8002c48 <UART_SetConfig+0x2f0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d104      	bne.n	8002a5a <UART_SetConfig+0x102>
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e003      	b.n	8002a62 <UART_SetConfig+0x10a>
 8002a5a:	231f      	movs	r3, #31
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2210      	movs	r2, #16
 8002a60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d000      	beq.n	8002a70 <UART_SetConfig+0x118>
 8002a6e:	e06f      	b.n	8002b50 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002a70:	231f      	movs	r3, #31
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d01f      	beq.n	8002aba <UART_SetConfig+0x162>
 8002a7a:	dc22      	bgt.n	8002ac2 <UART_SetConfig+0x16a>
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d017      	beq.n	8002ab0 <UART_SetConfig+0x158>
 8002a80:	dc1f      	bgt.n	8002ac2 <UART_SetConfig+0x16a>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <UART_SetConfig+0x134>
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d005      	beq.n	8002a96 <UART_SetConfig+0x13e>
 8002a8a:	e01a      	b.n	8002ac2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f7fe febc 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e01c      	b.n	8002ad0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002a96:	4b6b      	ldr	r3, [pc, #428]	@ (8002c44 <UART_SetConfig+0x2ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	4869      	ldr	r0, [pc, #420]	@ (8002c4c <UART_SetConfig+0x2f4>)
 8002aa6:	f7fd fb2f 	bl	8000108 <__udivsi3>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
        break;
 8002aae:	e00f      	b.n	8002ad0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab0:	f7fe fe4c 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	61bb      	str	r3, [r7, #24]
        break;
 8002ab8:	e00a      	b.n	8002ad0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	61bb      	str	r3, [r7, #24]
        break;
 8002ac0:	e006      	b.n	8002ad0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ac6:	231e      	movs	r3, #30
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
        break;
 8002ace:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d100      	bne.n	8002ad8 <UART_SetConfig+0x180>
 8002ad6:	e097      	b.n	8002c08 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002adc:	4b5c      	ldr	r3, [pc, #368]	@ (8002c50 <UART_SetConfig+0x2f8>)
 8002ade:	0052      	lsls	r2, r2, #1
 8002ae0:	5ad3      	ldrh	r3, [r2, r3]
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7fd fb0f 	bl	8000108 <__udivsi3>
 8002aea:	0003      	movs	r3, r0
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	18d2      	adds	r2, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f7fd fb03 	bl	8000108 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d91c      	bls.n	8002b46 <UART_SetConfig+0x1ee>
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	025b      	lsls	r3, r3, #9
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d217      	bcs.n	8002b46 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	200e      	movs	r0, #14
 8002b1c:	183b      	adds	r3, r7, r0
 8002b1e:	210f      	movs	r1, #15
 8002b20:	438a      	bics	r2, r1
 8002b22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	183a      	adds	r2, r7, r0
 8002b34:	8812      	ldrh	r2, [r2, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	183a      	adds	r2, r7, r0
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e060      	b.n	8002c08 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b46:	231e      	movs	r3, #30
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e05b      	b.n	8002c08 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b50:	231f      	movs	r3, #31
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d01f      	beq.n	8002b9a <UART_SetConfig+0x242>
 8002b5a:	dc22      	bgt.n	8002ba2 <UART_SetConfig+0x24a>
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d017      	beq.n	8002b90 <UART_SetConfig+0x238>
 8002b60:	dc1f      	bgt.n	8002ba2 <UART_SetConfig+0x24a>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <UART_SetConfig+0x214>
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d005      	beq.n	8002b76 <UART_SetConfig+0x21e>
 8002b6a:	e01a      	b.n	8002ba2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7fe fe4c 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]
        break;
 8002b74:	e01c      	b.n	8002bb0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b76:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <UART_SetConfig+0x2ec>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	4013      	ands	r3, r2
 8002b80:	3301      	adds	r3, #1
 8002b82:	0019      	movs	r1, r3
 8002b84:	4831      	ldr	r0, [pc, #196]	@ (8002c4c <UART_SetConfig+0x2f4>)
 8002b86:	f7fd fabf 	bl	8000108 <__udivsi3>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	61bb      	str	r3, [r7, #24]
        break;
 8002b8e:	e00f      	b.n	8002bb0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b90:	f7fe fddc 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8002b94:	0003      	movs	r3, r0
 8002b96:	61bb      	str	r3, [r7, #24]
        break;
 8002b98:	e00a      	b.n	8002bb0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ba0:	e006      	b.n	8002bb0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ba6:	231e      	movs	r3, #30
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
        break;
 8002bae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d028      	beq.n	8002c08 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bba:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <UART_SetConfig+0x2f8>)
 8002bbc:	0052      	lsls	r2, r2, #1
 8002bbe:	5ad3      	ldrh	r3, [r2, r3]
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	69b8      	ldr	r0, [r7, #24]
 8002bc4:	f7fd faa0 	bl	8000108 <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	001a      	movs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	18d2      	adds	r2, r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f7fd fa94 	bl	8000108 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d90a      	bls.n	8002c00 <UART_SetConfig+0x2a8>
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d205      	bcs.n	8002c00 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e003      	b.n	8002c08 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c00:	231e      	movs	r3, #30
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	226a      	movs	r2, #106	@ 0x6a
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2268      	movs	r2, #104	@ 0x68
 8002c14:	2101      	movs	r1, #1
 8002c16:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c24:	231e      	movs	r3, #30
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	781b      	ldrb	r3, [r3, #0]
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b008      	add	sp, #32
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	cfff69f3 	.word	0xcfff69f3
 8002c38:	ffffcfff 	.word	0xffffcfff
 8002c3c:	11fff4ff 	.word	0x11fff4ff
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	02dc6c00 	.word	0x02dc6c00
 8002c50:	080031e8 	.word	0x080031e8

08002c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	2208      	movs	r2, #8
 8002c62:	4013      	ands	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d98 <UART_AdvFeatureConfig+0x144>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a43      	ldr	r2, [pc, #268]	@ (8002d9c <UART_AdvFeatureConfig+0x148>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002da0 <UART_AdvFeatureConfig+0x14c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <UART_AdvFeatureConfig+0x150>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	2210      	movs	r2, #16
 8002cea:	4013      	ands	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <UART_AdvFeatureConfig+0x154>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a25      	ldr	r2, [pc, #148]	@ (8002dac <UART_AdvFeatureConfig+0x158>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a1d      	ldr	r2, [pc, #116]	@ (8002db0 <UART_AdvFeatureConfig+0x15c>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	035b      	lsls	r3, r3, #13
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10b      	bne.n	8002d6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <UART_AdvFeatureConfig+0x160>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00b      	beq.n	8002d90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <UART_AdvFeatureConfig+0x164>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	ffff7fff 	.word	0xffff7fff
 8002d9c:	fffdffff 	.word	0xfffdffff
 8002da0:	fffeffff 	.word	0xfffeffff
 8002da4:	fffbffff 	.word	0xfffbffff
 8002da8:	ffffefff 	.word	0xffffefff
 8002dac:	ffffdfff 	.word	0xffffdfff
 8002db0:	ffefffff 	.word	0xffefffff
 8002db4:	ff9fffff 	.word	0xff9fffff
 8002db8:	fff7ffff 	.word	0xfff7ffff

08002dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b092      	sub	sp, #72	@ 0x48
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2290      	movs	r2, #144	@ 0x90
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dcc:	f7fd fed4 	bl	8000b78 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d12d      	bne.n	8002e3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	0391      	lsls	r1, r2, #14
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <UART_CheckIdleState+0x14c>)
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f000 f88e 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d022      	beq.n	8002e3e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002df8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e02:	2301      	movs	r3, #1
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2180      	movs	r1, #128	@ 0x80
 8002e1a:	438a      	bics	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2288      	movs	r2, #136	@ 0x88
 8002e2e:	2120      	movs	r1, #32
 8002e30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2284      	movs	r2, #132	@ 0x84
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e060      	b.n	8002f00 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d146      	bne.n	8002eda <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4e:	2280      	movs	r2, #128	@ 0x80
 8002e50:	03d1      	lsls	r1, r2, #15
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4a2c      	ldr	r2, [pc, #176]	@ (8002f08 <UART_CheckIdleState+0x14c>)
 8002e56:	9200      	str	r2, [sp, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f000 f859 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d03b      	beq.n	8002eda <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e68:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4922      	ldr	r1, [pc, #136]	@ (8002f0c <UART_CheckIdleState+0x150>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	228c      	movs	r2, #140	@ 0x8c
 8002eca:	2120      	movs	r1, #32
 8002ecc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2284      	movs	r2, #132	@ 0x84
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e012      	b.n	8002f00 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2288      	movs	r2, #136	@ 0x88
 8002ede:	2120      	movs	r1, #32
 8002ee0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	228c      	movs	r2, #140	@ 0x8c
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2284      	movs	r2, #132	@ 0x84
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b010      	add	sp, #64	@ 0x40
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	01ffffff 	.word	0x01ffffff
 8002f0c:	fffffedf 	.word	0xfffffedf

08002f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	e051      	b.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3301      	adds	r3, #1
 8002f26:	d04e      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fd fe26 	bl	8000b78 <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e051      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d03b      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b80      	cmp	r3, #128	@ 0x80
 8002f52:	d038      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d035      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2208      	movs	r2, #8
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d111      	bne.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f83c 	bl	8002ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2290      	movs	r2, #144	@ 0x90
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2284      	movs	r2, #132	@ 0x84
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e02c      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	401a      	ands	r2, r3
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d112      	bne.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2280      	movs	r2, #128	@ 0x80
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 f81f 	bl	8002ff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2290      	movs	r2, #144	@ 0x90
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2284      	movs	r2, #132	@ 0x84
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e00f      	b.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	425a      	negs	r2, r3
 8002fd6:	4153      	adcs	r3, r2
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	001a      	movs	r2, r3
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d09e      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	@ 0x38
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ffe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f383 8810 	msr	PRIMASK, r3
}
 800300c:	46c0      	nop			@ (mov r8, r8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4926      	ldr	r1, [pc, #152]	@ (80030b4 <UART_EndRxTransfer+0xc4>)
 800301a:	400a      	ands	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800302a:	f3ef 8310 	mrs	r3, PRIMASK
 800302e:	623b      	str	r3, [r7, #32]
  return(result);
 8003030:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
 8003034:	2301      	movs	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f383 8810 	msr	PRIMASK, r3
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	491b      	ldr	r1, [pc, #108]	@ (80030b8 <UART_EndRxTransfer+0xc8>)
 800304c:	400a      	ands	r2, r1
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d118      	bne.n	8003096 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003064:	f3ef 8310 	mrs	r3, PRIMASK
 8003068:	60bb      	str	r3, [r7, #8]
  return(result);
 800306a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306e:	2301      	movs	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f383 8810 	msr	PRIMASK, r3
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2110      	movs	r1, #16
 8003086:	438a      	bics	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	228c      	movs	r2, #140	@ 0x8c
 800309a:	2120      	movs	r1, #32
 800309c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b00e      	add	sp, #56	@ 0x38
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	fffffedf 	.word	0xfffffedf
 80030b8:	effffffe 	.word	0xeffffffe

080030bc <memset>:
 80030bc:	0003      	movs	r3, r0
 80030be:	1882      	adds	r2, r0, r2
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	7019      	strb	r1, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	2600      	movs	r6, #0
 80030d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003104 <__libc_init_array+0x38>)
 80030d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003108 <__libc_init_array+0x3c>)
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	2600      	movs	r6, #0
 80030de:	f000 f819 	bl	8003114 <_init>
 80030e2:	4c0a      	ldr	r4, [pc, #40]	@ (800310c <__libc_init_array+0x40>)
 80030e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003110 <__libc_init_array+0x44>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	42a6      	cmp	r6, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	00b3      	lsls	r3, r6, #2
 80030f2:	58eb      	ldr	r3, [r5, r3]
 80030f4:	4798      	blx	r3
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	00b3      	lsls	r3, r6, #2
 80030fc:	58eb      	ldr	r3, [r5, r3]
 80030fe:	4798      	blx	r3
 8003100:	3601      	adds	r6, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	08003200 	.word	0x08003200
 8003108:	08003200 	.word	0x08003200
 800310c:	08003204 	.word	0x08003204
 8003110:	08003200 	.word	0x08003200

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
